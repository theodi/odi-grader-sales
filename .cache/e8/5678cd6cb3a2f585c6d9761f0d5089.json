{"id":"node_modules/ajv/dist/vocabularies/jtd/values.js","dependencies":[{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/values.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/lib/vocabularies/jtd/values.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/lucyknight/odi-grader-sales/package.json","includedInParent":true,"mtime":1649847102319},{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/package.json","includedInParent":true,"mtime":1648635397345},{"name":"../../compile/util","loc":{"line":3,"column":23,"index":100},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/values.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/util.js"},{"name":"../../compile/codegen","loc":{"line":4,"column":26,"index":149},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/values.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/codegen/index.js"},{"name":"./metadata","loc":{"line":5,"column":27,"index":202},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/values.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/metadata.js"},{"name":"./nullable","loc":{"line":6,"column":27,"index":244},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/values.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/nullable.js"},{"name":"./error","loc":{"line":7,"column":24,"index":283},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/values.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/error.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../../compile/util\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst metadata_1 = require(\"./metadata\");\nconst nullable_1 = require(\"./nullable\");\nconst error_1 = require(\"./error\");\nconst def = {\n    keyword: \"values\",\n    schemaType: \"object\",\n    error: (0, error_1.typeError)(\"object\"),\n    code(cxt) {\n        (0, metadata_1.checkMetadata)(cxt);\n        const { gen, data, schema, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        const [valid, cond] = (0, nullable_1.checkNullableObject)(cxt, data);\n        gen.if(cond);\n        gen.assign(valid, validateMap());\n        gen.elseIf((0, codegen_1.not)(valid));\n        cxt.error();\n        gen.endIf();\n        cxt.ok(valid);\n        function validateMap() {\n            const _valid = gen.name(\"valid\");\n            if (it.allErrors) {\n                const validMap = gen.let(\"valid\", true);\n                validateValues(() => gen.assign(validMap, false));\n                return validMap;\n            }\n            gen.var(_valid, true);\n            validateValues(() => gen.break());\n            return _valid;\n            function validateValues(notValid) {\n                gen.forIn(\"key\", data, (key) => {\n                    cxt.subschema({\n                        keyword: \"values\",\n                        dataProp: key,\n                        dataPropType: util_1.Type.Str,\n                    }, _valid);\n                    gen.if((0, codegen_1.not)(_valid), notValid);\n                });\n            }\n        }\n    },\n};\nexports.default = def;\n"},"sourceMaps":{"js":{"version":3,"file":"values.js","sourceRoot":"","sources":["../../../lib/vocabularies/jtd/values.ts"],"names":[],"mappings":";;AAEA,6CAA0D;AAC1D,mDAA+C;AAC/C,yCAAwC;AACxC,yCAA8C;AAC9C,mCAAgD;AAIhD,MAAM,GAAG,GAA0B;IACjC,OAAO,EAAE,QAAQ;IACjB,UAAU,EAAE,QAAQ;IACpB,KAAK,EAAE,IAAA,iBAAS,EAAC,QAAQ,CAAC;IAC1B,IAAI,CAAC,GAAe;QAClB,IAAA,wBAAa,EAAC,GAAG,CAAC,CAAA;QAClB,MAAM,EAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAC,GAAG,GAAG,CAAA;QACnC,IAAI,IAAA,wBAAiB,EAAC,EAAE,EAAE,MAAM,CAAC;YAAE,OAAM;QACzC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,IAAA,8BAAmB,EAAC,GAAG,EAAE,IAAI,CAAC,CAAA;QACpD,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;QACZ,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,CAAC,CAAA;QAChC,GAAG,CAAC,MAAM,CAAC,IAAA,aAAG,EAAC,KAAK,CAAC,CAAC,CAAA;QACtB,GAAG,CAAC,KAAK,EAAE,CAAA;QACX,GAAG,CAAC,KAAK,EAAE,CAAA;QACX,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAA;QAEb,SAAS,WAAW;YAClB,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAChC,IAAI,EAAE,CAAC,SAAS,EAAE;gBAChB,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;gBACvC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAA;gBACjD,OAAO,QAAQ,CAAA;aAChB;YACD,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;YACrB,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAA;YACjC,OAAO,MAAM,CAAA;YAEb,SAAS,cAAc,CAAC,QAAoB;gBAC1C,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;oBAC7B,GAAG,CAAC,SAAS,CACX;wBACE,OAAO,EAAE,QAAQ;wBACjB,QAAQ,EAAE,GAAG;wBACb,YAAY,EAAE,WAAI,CAAC,GAAG;qBACvB,EACD,MAAM,CACP,CAAA;oBACD,GAAG,CAAC,EAAE,CAAC,IAAA,aAAG,EAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAA;gBAC/B,CAAC,CAAC,CAAA;YACJ,CAAC;QACH,CAAC;IACH,CAAC;CACF,CAAA;AAED,kBAAe,GAAG,CAAA","sourcesContent":["import type {CodeKeywordDefinition, SchemaObject} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema, Type} from \"../../compile/util\"\nimport {not, Name} from \"../../compile/codegen\"\nimport {checkMetadata} from \"./metadata\"\nimport {checkNullableObject} from \"./nullable\"\nimport {typeError, _JTDTypeError} from \"./error\"\n\nexport type JTDValuesError = _JTDTypeError<\"values\", \"object\", SchemaObject>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"values\",\n  schemaType: \"object\",\n  error: typeError(\"object\"),\n  code(cxt: KeywordCxt) {\n    checkMetadata(cxt)\n    const {gen, data, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const [valid, cond] = checkNullableObject(cxt, data)\n    gen.if(cond)\n    gen.assign(valid, validateMap())\n    gen.elseIf(not(valid))\n    cxt.error()\n    gen.endIf()\n    cxt.ok(valid)\n\n    function validateMap(): Name | boolean {\n      const _valid = gen.name(\"valid\")\n      if (it.allErrors) {\n        const validMap = gen.let(\"valid\", true)\n        validateValues(() => gen.assign(validMap, false))\n        return validMap\n      }\n      gen.var(_valid, true)\n      validateValues(() => gen.break())\n      return _valid\n\n      function validateValues(notValid: () => void): void {\n        gen.forIn(\"key\", data, (key) => {\n          cxt.subschema(\n            {\n              keyword: \"values\",\n              dataProp: key,\n              dataPropType: Type.Str,\n            },\n            _valid\n          )\n          gen.if(not(_valid), notValid)\n        })\n      }\n    }\n  },\n}\n\nexport default def\n"]}},"error":null,"hash":"3afb5443397e5421b0e07e1339f1b380","cacheData":{"env":{}}}