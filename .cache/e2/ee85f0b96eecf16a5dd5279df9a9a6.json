{"id":"node_modules/ajv/dist/compile/jtd/serialize.js","dependencies":[{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/lib/compile/jtd/serialize.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/lucyknight/odi-grader-sales/package.json","includedInParent":true,"mtime":1649847102319},{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/package.json","includedInParent":true,"mtime":1648635397345},{"name":"./types","loc":{"line":3,"column":24,"index":101},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/types.js"},{"name":"..","loc":{"line":4,"column":20,"index":133},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/index.js"},{"name":"../codegen","loc":{"line":5,"column":26,"index":166},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/codegen/index.js"},{"name":"../ref_error","loc":{"line":6,"column":28,"index":209},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/ref_error.js"},{"name":"../names","loc":{"line":7,"column":24,"index":250},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/names.js"},{"name":"../../vocabularies/code","loc":{"line":8,"column":23,"index":286},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/code.js"},{"name":"../../vocabularies/jtd/ref","loc":{"line":9,"column":22,"index":336},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/ref.js"},{"name":"../util","loc":{"line":10,"column":23,"index":390},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/util.js"},{"name":"../../runtime/quote","loc":{"line":11,"column":24,"index":426},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/jtd/serialize.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/runtime/quote.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"./types\");\nconst __1 = require(\"..\");\nconst codegen_1 = require(\"../codegen\");\nconst ref_error_1 = require(\"../ref_error\");\nconst names_1 = require(\"../names\");\nconst code_1 = require(\"../../vocabularies/code\");\nconst ref_1 = require(\"../../vocabularies/jtd/ref\");\nconst util_1 = require(\"../util\");\nconst quote_1 = require(\"../../runtime/quote\");\nconst genSerialize = {\n    elements: serializeElements,\n    values: serializeValues,\n    discriminator: serializeDiscriminator,\n    properties: serializeProperties,\n    optionalProperties: serializeProperties,\n    enum: serializeString,\n    type: serializeType,\n    ref: serializeRef,\n};\nfunction compileSerializer(sch, definitions) {\n    const _sch = __1.getCompilingSchema.call(this, sch);\n    if (_sch)\n        return _sch;\n    const { es5, lines } = this.opts.code;\n    const { ownProperties } = this.opts;\n    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });\n    const serializeName = gen.scopeName(\"serialize\");\n    const cxt = {\n        self: this,\n        gen,\n        schema: sch.schema,\n        schemaEnv: sch,\n        definitions,\n        data: names_1.default.data,\n    };\n    let sourceCode;\n    try {\n        this._compilations.add(sch);\n        sch.serializeName = serializeName;\n        gen.func(serializeName, names_1.default.data, false, () => {\n            gen.let(names_1.default.json, (0, codegen_1.str) ``);\n            serializeCode(cxt);\n            gen.return(names_1.default.json);\n        });\n        gen.optimize(this.opts.code.optimize);\n        const serializeFuncCode = gen.toString();\n        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${serializeFuncCode}`;\n        const makeSerialize = new Function(`${names_1.default.scope}`, sourceCode);\n        const serialize = makeSerialize(this.scope.get());\n        this.scope.value(serializeName, { ref: serialize });\n        sch.serialize = serialize;\n    }\n    catch (e) {\n        if (sourceCode)\n            this.logger.error(\"Error compiling serializer, function code:\", sourceCode);\n        delete sch.serialize;\n        delete sch.serializeName;\n        throw e;\n    }\n    finally {\n        this._compilations.delete(sch);\n    }\n    return sch;\n}\nexports.default = compileSerializer;\nfunction serializeCode(cxt) {\n    let form;\n    for (const key of types_1.jtdForms) {\n        if (key in cxt.schema) {\n            form = key;\n            break;\n        }\n    }\n    serializeNullable(cxt, form ? genSerialize[form] : serializeEmpty);\n}\nfunction serializeNullable(cxt, serializeForm) {\n    const { gen, schema, data } = cxt;\n    if (!schema.nullable)\n        return serializeForm(cxt);\n    gen.if((0, codegen_1._) `${data} === undefined || ${data} === null`, () => gen.add(names_1.default.json, (0, codegen_1._) `\"null\"`), () => serializeForm(cxt));\n}\nfunction serializeElements(cxt) {\n    const { gen, schema, data } = cxt;\n    gen.add(names_1.default.json, (0, codegen_1.str) `[`);\n    const first = gen.let(\"first\", true);\n    gen.forOf(\"el\", data, (el) => {\n        addComma(cxt, first);\n        serializeCode({ ...cxt, schema: schema.elements, data: el });\n    });\n    gen.add(names_1.default.json, (0, codegen_1.str) `]`);\n}\nfunction serializeValues(cxt) {\n    const { gen, schema, data } = cxt;\n    gen.add(names_1.default.json, (0, codegen_1.str) `{`);\n    const first = gen.let(\"first\", true);\n    gen.forIn(\"key\", data, (key) => serializeKeyValue(cxt, key, schema.values, first));\n    gen.add(names_1.default.json, (0, codegen_1.str) `}`);\n}\nfunction serializeKeyValue(cxt, key, schema, first) {\n    const { gen, data } = cxt;\n    addComma(cxt, first);\n    serializeString({ ...cxt, data: key });\n    gen.add(names_1.default.json, (0, codegen_1.str) `:`);\n    const value = gen.const(\"value\", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(key)}`);\n    serializeCode({ ...cxt, schema, data: value });\n}\nfunction serializeDiscriminator(cxt) {\n    const { gen, schema, data } = cxt;\n    const { discriminator } = schema;\n    gen.add(names_1.default.json, (0, codegen_1.str) `{${JSON.stringify(discriminator)}:`);\n    const tag = gen.const(\"tag\", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(discriminator)}`);\n    serializeString({ ...cxt, data: tag });\n    gen.if(false);\n    for (const tagValue in schema.mapping) {\n        gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);\n        const sch = schema.mapping[tagValue];\n        serializeSchemaProperties({ ...cxt, schema: sch }, discriminator);\n    }\n    gen.endIf();\n    gen.add(names_1.default.json, (0, codegen_1.str) `}`);\n}\nfunction serializeProperties(cxt) {\n    const { gen } = cxt;\n    gen.add(names_1.default.json, (0, codegen_1.str) `{`);\n    serializeSchemaProperties(cxt);\n    gen.add(names_1.default.json, (0, codegen_1.str) `}`);\n}\nfunction serializeSchemaProperties(cxt, discriminator) {\n    const { gen, schema, data } = cxt;\n    const { properties, optionalProperties } = schema;\n    const props = keys(properties);\n    const optProps = keys(optionalProperties);\n    const allProps = allProperties(props.concat(optProps));\n    let first = !discriminator;\n    for (const key of props) {\n        serializeProperty(key, properties[key], keyValue(key));\n    }\n    for (const key of optProps) {\n        const value = keyValue(key);\n        gen.if((0, codegen_1.and)((0, codegen_1._) `${value} !== undefined`, (0, code_1.isOwnProperty)(gen, data, key)), () => serializeProperty(key, optionalProperties[key], value));\n    }\n    if (schema.additionalProperties) {\n        gen.forIn(\"key\", data, (key) => gen.if(isAdditional(key, allProps), () => serializeKeyValue(cxt, key, {}, gen.let(\"first\", first))));\n    }\n    function keys(ps) {\n        return ps ? Object.keys(ps) : [];\n    }\n    function allProperties(ps) {\n        if (discriminator)\n            ps.push(discriminator);\n        if (new Set(ps).size !== ps.length) {\n            throw new Error(\"JTD: properties/optionalProperties/disciminator overlap\");\n        }\n        return ps;\n    }\n    function keyValue(key) {\n        return gen.const(\"value\", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(key)}`);\n    }\n    function serializeProperty(key, propSchema, value) {\n        if (first)\n            first = false;\n        else\n            gen.add(names_1.default.json, (0, codegen_1.str) `,`);\n        gen.add(names_1.default.json, (0, codegen_1.str) `${JSON.stringify(key)}:`);\n        serializeCode({ ...cxt, schema: propSchema, data: value });\n    }\n    function isAdditional(key, ps) {\n        return ps.length ? (0, codegen_1.and)(...ps.map((p) => (0, codegen_1._) `${key} !== ${p}`)) : true;\n    }\n}\nfunction serializeType(cxt) {\n    const { gen, schema, data } = cxt;\n    switch (schema.type) {\n        case \"boolean\":\n            gen.add(names_1.default.json, (0, codegen_1._) `${data} ? \"true\" : \"false\"`);\n            break;\n        case \"string\":\n            serializeString(cxt);\n            break;\n        case \"timestamp\":\n            gen.if((0, codegen_1._) `${data} instanceof Date`, () => gen.add(names_1.default.json, (0, codegen_1._) `'\"' + ${data}.toISOString() + '\"'`), () => serializeString(cxt));\n            break;\n        default:\n            serializeNumber(cxt);\n    }\n}\nfunction serializeString({ gen, data }) {\n    gen.add(names_1.default.json, (0, codegen_1._) `${(0, util_1.useFunc)(gen, quote_1.default)}(${data})`);\n}\nfunction serializeNumber({ gen, data }) {\n    gen.add(names_1.default.json, (0, codegen_1._) `\"\" + ${data}`);\n}\nfunction serializeRef(cxt) {\n    const { gen, self, data, definitions, schema, schemaEnv } = cxt;\n    const { ref } = schema;\n    const refSchema = definitions[ref];\n    if (!refSchema)\n        throw new ref_error_1.default(self.opts.uriResolver, \"\", ref, `No definition ${ref}`);\n    if (!(0, ref_1.hasRef)(refSchema))\n        return serializeCode({ ...cxt, schema: refSchema });\n    const { root } = schemaEnv;\n    const sch = compileSerializer.call(self, new __1.SchemaEnv({ schema: refSchema, root }), definitions);\n    gen.add(names_1.default.json, (0, codegen_1._) `${getSerialize(gen, sch)}(${data})`);\n}\nfunction getSerialize(gen, sch) {\n    return sch.serialize\n        ? gen.scopeValue(\"serialize\", { ref: sch.serialize })\n        : (0, codegen_1._) `${gen.scopeValue(\"wrapper\", { ref: sch })}.serialize`;\n}\nfunction serializeEmpty({ gen, data }) {\n    gen.add(names_1.default.json, (0, codegen_1._) `JSON.stringify(${data})`);\n}\nfunction addComma({ gen }, first) {\n    gen.if(first, () => gen.assign(first, false), () => gen.add(names_1.default.json, (0, codegen_1.str) `,`));\n}\n"},"sourceMaps":{"js":{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../../lib/compile/jtd/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import type Ajv from \"../../core\"\nimport type {SchemaObject} from \"../../types\"\nimport {jtdForms, JTDForm, SchemaObjectMap} from \"./types\"\nimport {SchemaEnv, getCompilingSchema} from \"..\"\nimport {_, str, and, getProperty, CodeGen, Code, Name} from \"../codegen\"\nimport MissingRefError from \"../ref_error\"\nimport N from \"../names\"\nimport {isOwnProperty} from \"../../vocabularies/code\"\nimport {hasRef} from \"../../vocabularies/jtd/ref\"\nimport {useFunc} from \"../util\"\nimport quote from \"../../runtime/quote\"\n\nconst genSerialize: {[F in JTDForm]: (cxt: SerializeCxt) => void} = {\n  elements: serializeElements,\n  values: serializeValues,\n  discriminator: serializeDiscriminator,\n  properties: serializeProperties,\n  optionalProperties: serializeProperties,\n  enum: serializeString,\n  type: serializeType,\n  ref: serializeRef,\n}\n\ninterface SerializeCxt {\n  readonly gen: CodeGen\n  readonly self: Ajv // current Ajv instance\n  readonly schemaEnv: SchemaEnv\n  readonly definitions: SchemaObjectMap\n  schema: SchemaObject\n  data: Code\n}\n\nexport default function compileSerializer(\n  this: Ajv,\n  sch: SchemaEnv,\n  definitions: SchemaObjectMap\n): SchemaEnv {\n  const _sch = getCompilingSchema.call(this, sch)\n  if (_sch) return _sch\n  const {es5, lines} = this.opts.code\n  const {ownProperties} = this.opts\n  const gen = new CodeGen(this.scope, {es5, lines, ownProperties})\n  const serializeName = gen.scopeName(\"serialize\")\n  const cxt: SerializeCxt = {\n    self: this,\n    gen,\n    schema: sch.schema as SchemaObject,\n    schemaEnv: sch,\n    definitions,\n    data: N.data,\n  }\n\n  let sourceCode: string | undefined\n  try {\n    this._compilations.add(sch)\n    sch.serializeName = serializeName\n    gen.func(serializeName, N.data, false, () => {\n      gen.let(N.json, str``)\n      serializeCode(cxt)\n      gen.return(N.json)\n    })\n    gen.optimize(this.opts.code.optimize)\n    const serializeFuncCode = gen.toString()\n    sourceCode = `${gen.scopeRefs(N.scope)}return ${serializeFuncCode}`\n    const makeSerialize = new Function(`${N.scope}`, sourceCode)\n    const serialize: (data: unknown) => string = makeSerialize(this.scope.get())\n    this.scope.value(serializeName, {ref: serialize})\n    sch.serialize = serialize\n  } catch (e) {\n    if (sourceCode) this.logger.error(\"Error compiling serializer, function code:\", sourceCode)\n    delete sch.serialize\n    delete sch.serializeName\n    throw e\n  } finally {\n    this._compilations.delete(sch)\n  }\n  return sch\n}\n\nfunction serializeCode(cxt: SerializeCxt): void {\n  let form: JTDForm | undefined\n  for (const key of jtdForms) {\n    if (key in cxt.schema) {\n      form = key\n      break\n    }\n  }\n  serializeNullable(cxt, form ? genSerialize[form] : serializeEmpty)\n}\n\nfunction serializeNullable(cxt: SerializeCxt, serializeForm: (_cxt: SerializeCxt) => void): void {\n  const {gen, schema, data} = cxt\n  if (!schema.nullable) return serializeForm(cxt)\n  gen.if(\n    _`${data} === undefined || ${data} === null`,\n    () => gen.add(N.json, _`\"null\"`),\n    () => serializeForm(cxt)\n  )\n}\n\nfunction serializeElements(cxt: SerializeCxt): void {\n  const {gen, schema, data} = cxt\n  gen.add(N.json, str`[`)\n  const first = gen.let(\"first\", true)\n  gen.forOf(\"el\", data, (el) => {\n    addComma(cxt, first)\n    serializeCode({...cxt, schema: schema.elements, data: el})\n  })\n  gen.add(N.json, str`]`)\n}\n\nfunction serializeValues(cxt: SerializeCxt): void {\n  const {gen, schema, data} = cxt\n  gen.add(N.json, str`{`)\n  const first = gen.let(\"first\", true)\n  gen.forIn(\"key\", data, (key) => serializeKeyValue(cxt, key, schema.values, first))\n  gen.add(N.json, str`}`)\n}\n\nfunction serializeKeyValue(cxt: SerializeCxt, key: Name, schema: SchemaObject, first: Name): void {\n  const {gen, data} = cxt\n  addComma(cxt, first)\n  serializeString({...cxt, data: key})\n  gen.add(N.json, str`:`)\n  const value = gen.const(\"value\", _`${data}${getProperty(key)}`)\n  serializeCode({...cxt, schema, data: value})\n}\n\nfunction serializeDiscriminator(cxt: SerializeCxt): void {\n  const {gen, schema, data} = cxt\n  const {discriminator} = schema\n  gen.add(N.json, str`{${JSON.stringify(discriminator)}:`)\n  const tag = gen.const(\"tag\", _`${data}${getProperty(discriminator)}`)\n  serializeString({...cxt, data: tag})\n  gen.if(false)\n  for (const tagValue in schema.mapping) {\n    gen.elseIf(_`${tag} === ${tagValue}`)\n    const sch = schema.mapping[tagValue]\n    serializeSchemaProperties({...cxt, schema: sch}, discriminator)\n  }\n  gen.endIf()\n  gen.add(N.json, str`}`)\n}\n\nfunction serializeProperties(cxt: SerializeCxt): void {\n  const {gen} = cxt\n  gen.add(N.json, str`{`)\n  serializeSchemaProperties(cxt)\n  gen.add(N.json, str`}`)\n}\n\nfunction serializeSchemaProperties(cxt: SerializeCxt, discriminator?: string): void {\n  const {gen, schema, data} = cxt\n  const {properties, optionalProperties} = schema\n  const props = keys(properties)\n  const optProps = keys(optionalProperties)\n  const allProps = allProperties(props.concat(optProps))\n  let first = !discriminator\n  for (const key of props) {\n    serializeProperty(key, properties[key], keyValue(key))\n  }\n  for (const key of optProps) {\n    const value = keyValue(key)\n    gen.if(and(_`${value} !== undefined`, isOwnProperty(gen, data, key)), () =>\n      serializeProperty(key, optionalProperties[key], value)\n    )\n  }\n  if (schema.additionalProperties) {\n    gen.forIn(\"key\", data, (key) =>\n      gen.if(isAdditional(key, allProps), () =>\n        serializeKeyValue(cxt, key, {}, gen.let(\"first\", first))\n      )\n    )\n  }\n\n  function keys(ps?: SchemaObjectMap): string[] {\n    return ps ? Object.keys(ps) : []\n  }\n\n  function allProperties(ps: string[]): string[] {\n    if (discriminator) ps.push(discriminator)\n    if (new Set(ps).size !== ps.length) {\n      throw new Error(\"JTD: properties/optionalProperties/disciminator overlap\")\n    }\n    return ps\n  }\n\n  function keyValue(key: string): Name {\n    return gen.const(\"value\", _`${data}${getProperty(key)}`)\n  }\n\n  function serializeProperty(key: string, propSchema: SchemaObject, value: Name): void {\n    if (first) first = false\n    else gen.add(N.json, str`,`)\n    gen.add(N.json, str`${JSON.stringify(key)}:`)\n    serializeCode({...cxt, schema: propSchema, data: value})\n  }\n\n  function isAdditional(key: Name, ps: string[]): Code | true {\n    return ps.length ? and(...ps.map((p) => _`${key} !== ${p}`)) : true\n  }\n}\n\nfunction serializeType(cxt: SerializeCxt): void {\n  const {gen, schema, data} = cxt\n  switch (schema.type) {\n    case \"boolean\":\n      gen.add(N.json, _`${data} ? \"true\" : \"false\"`)\n      break\n    case \"string\":\n      serializeString(cxt)\n      break\n    case \"timestamp\":\n      gen.if(\n        _`${data} instanceof Date`,\n        () => gen.add(N.json, _`'\"' + ${data}.toISOString() + '\"'`),\n        () => serializeString(cxt)\n      )\n      break\n    default:\n      serializeNumber(cxt)\n  }\n}\n\nfunction serializeString({gen, data}: SerializeCxt): void {\n  gen.add(N.json, _`${useFunc(gen, quote)}(${data})`)\n}\n\nfunction serializeNumber({gen, data}: SerializeCxt): void {\n  gen.add(N.json, _`\"\" + ${data}`)\n}\n\nfunction serializeRef(cxt: SerializeCxt): void {\n  const {gen, self, data, definitions, schema, schemaEnv} = cxt\n  const {ref} = schema\n  const refSchema = definitions[ref]\n  if (!refSchema) throw new MissingRefError(self.opts.uriResolver, \"\", ref, `No definition ${ref}`)\n  if (!hasRef(refSchema)) return serializeCode({...cxt, schema: refSchema})\n  const {root} = schemaEnv\n  const sch = compileSerializer.call(self, new SchemaEnv({schema: refSchema, root}), definitions)\n  gen.add(N.json, _`${getSerialize(gen, sch)}(${data})`)\n}\n\nfunction getSerialize(gen: CodeGen, sch: SchemaEnv): Code {\n  return sch.serialize\n    ? gen.scopeValue(\"serialize\", {ref: sch.serialize})\n    : _`${gen.scopeValue(\"wrapper\", {ref: sch})}.serialize`\n}\n\nfunction serializeEmpty({gen, data}: SerializeCxt): void {\n  gen.add(N.json, _`JSON.stringify(${data})`)\n}\n\nfunction addComma({gen}: SerializeCxt, first: Name): void {\n  gen.if(\n    first,\n    () => gen.assign(first, false),\n    () => gen.add(N.json, str`,`)\n  )\n}\n"]}},"error":null,"hash":"8309695a25fa03842589bc515a6f368d","cacheData":{"env":{}}}