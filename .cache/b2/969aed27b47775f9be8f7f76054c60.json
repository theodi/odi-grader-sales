{"id":"node_modules/ajv/dist/vocabularies/jtd/metadata.js","dependencies":[{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/metadata.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/lib/vocabularies/jtd/metadata.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/lucyknight/odi-grader-sales/package.json","includedInParent":true,"mtime":1649847102319},{"name":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/package.json","includedInParent":true,"mtime":1648635397345},{"name":"../../compile/util","loc":{"line":4,"column":23,"index":132},"parent":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/vocabularies/jtd/metadata.js","resolved":"/Users/lucyknight/odi-grader-sales/node_modules/ajv/dist/compile/util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkMetadata = void 0;\nconst util_1 = require(\"../../compile/util\");\nconst def = {\n    keyword: \"metadata\",\n    schemaType: \"object\",\n    code(cxt) {\n        checkMetadata(cxt);\n        const { gen, schema, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        const valid = gen.name(\"valid\");\n        cxt.subschema({ keyword: \"metadata\", jtdMetadata: true }, valid);\n        cxt.ok(valid);\n    },\n};\nfunction checkMetadata({ it, keyword }, metadata) {\n    if (it.jtdMetadata !== metadata) {\n        throw new Error(`JTD: \"${keyword}\" cannot be used in this schema location`);\n    }\n}\nexports.checkMetadata = checkMetadata;\nexports.default = def;\n"},"sourceMaps":{"js":{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../lib/vocabularies/jtd/metadata.ts"],"names":[],"mappings":";;;AAEA,6CAAoD;AAEpD,MAAM,GAAG,GAA0B;IACjC,OAAO,EAAE,UAAU;IACnB,UAAU,EAAE,QAAQ;IACpB,IAAI,CAAC,GAAe;QAClB,aAAa,CAAC,GAAG,CAAC,CAAA;QAClB,MAAM,EAAC,GAAG,EAAE,MAAM,EAAE,EAAE,EAAC,GAAG,GAAG,CAAA;QAC7B,IAAI,IAAA,wBAAiB,EAAC,EAAE,EAAE,MAAM,CAAC;YAAE,OAAM;QACzC,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC/B,GAAG,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAC,EAAE,KAAK,CAAC,CAAA;QAC9D,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAA;IACf,CAAC;CACF,CAAA;AAED,SAAgB,aAAa,CAAC,EAAC,EAAE,EAAE,OAAO,EAAa,EAAE,QAAkB;IACzE,IAAI,EAAE,CAAC,WAAW,KAAK,QAAQ,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,SAAS,OAAO,0CAA0C,CAAC,CAAA;KAC5E;AACH,CAAC;AAJD,sCAIC;AAED,kBAAe,GAAG,CAAA","sourcesContent":["import {KeywordCxt} from \"../../ajv\"\nimport type {CodeKeywordDefinition} from \"../../types\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"metadata\",\n  schemaType: \"object\",\n  code(cxt: KeywordCxt) {\n    checkMetadata(cxt)\n    const {gen, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n    cxt.subschema({keyword: \"metadata\", jtdMetadata: true}, valid)\n    cxt.ok(valid)\n  },\n}\n\nexport function checkMetadata({it, keyword}: KeywordCxt, metadata?: boolean): void {\n  if (it.jtdMetadata !== metadata) {\n    throw new Error(`JTD: \"${keyword}\" cannot be used in this schema location`)\n  }\n}\n\nexport default def\n"]}},"error":null,"hash":"4588f1681c780bb1e75504492eac1daa","cacheData":{"env":{}}}